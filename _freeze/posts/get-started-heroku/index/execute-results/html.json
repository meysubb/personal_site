{
  "hash": "3b735551db902cd51f28d9f43afad942",
  "result": {
    "markdown": "---\ntitle: 'Heroku for Data'\ndate:  '2019-03-14'\ncategories: ['R', 'Python', 'Heroku']\ndescription: 'Automate Tweets with Heroku'\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\n---\n\n\nOver the past few months, I've found myself relying on Heroku a lot! My two use cases for Heroku are (1) [Twitter bot](https://twitter.com/ChartsSec) posting about SEC basketball using ncaahoopR and (2) scraping both NCAA baseball and basketball data for use in a few different projects. \\\n\\\nIf you find yourself running repetitive processes, I highly recommend using Heroku! I'll walk through both my projects and some useful tips I've learnt. \\\n\n\n# Set-up Heroku\n\nObviously, if you don't already have an account with Herkou set one up. It's free. It's also helpful to have their CLI set up, the \\[instructions\\](https://devcenter.heroku.com/articles/heroku-cli) on their website are pretty straight forward to get you started. \\\n\\\nWhatever you push to your git repo is what will also be pushed to heroku after committing to git. But first let's figure out how to get our app started. You don't necessarily need to host apps on Heroku but can use it similar to a cron service if you'd like. \\\n\\\nA note Heroku is an ephemeral system. What this means is the files you create/scrape will not last long on the server. What you can do in this instance is save to Dropbox/Drive/S3 whatever service you like. \\\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nheroku login\n```\n:::\n\n\n\\\n**First Steps** \\\nBefore creating the application, we need to ensure that the following \\\n\\\n**Setting up ENV variables** \\\nIf you plan to set up a Twitter bot or scrape data and save to an external drive (like Dropbox). You'll definitely need to use an API. These API's will give you tokens. Naturally, there is concern to save these publicly in a git repo. Heroku provides an easily solution to avoid this. They have **config vars**, essentially environment variables. \\\n\\\nThese can be set up via the command line or the GUI interface. For [instructions](https://devcenter.heroku.com/articles/config-vars), again heroku does a great job. \\\n\\\nThese variables can then be accessed via either R or Python scripts. Just use `os.environ['ENV']` or `Sys.getenv('ENV')`, for python and R respectively. \\\n\\\n**Initial Setup** \\\nHeroku relies on build-packs to provide the capability to compile different programming languages. The R build-pack is made for a specific stack `heroku-16`. The following steps are required to get R setup and running.\n\n\\\n**R**\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nheroku create\nheroku stack:set 'heroku-16'\nheroku buildpacks:set https://github.com/virtualstaticvoid/heroku-buildpack-r.git#heroku-16\n```\n:::\n\n\n**Python** \\\nYou don't really need to do much in terms of setting a stack or build-pack for Python. Heroku handled them on its own, was able to identify python based on scripts.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nheroku create\n```\n:::\n\n\n\\\n**Required Files**\\\n\\\n**PYTHON**\\\nIf you are using Python, expect to include a `requirements.txt` file and a `runtime.txt` file. If the `runtime.txt` file is missing, Heroku will default to Python 3. If you intend to use Python 2, specify a `runtime.txt` file.\\\n\\\n**R**\\\nFor R, an `init.R` file is necessary with details of the packages you will be using. A quick snapshot of my `init.R` file looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_packages <- c(\"dplyr\",\"ggplot2\",\"rtweet\",\"lubridate\",'rvest','tidyr','devtools')\ninstall_if_missing <- function(p) {\n  if(p %in% rownames(installed.packages())==FALSE){\n    install.packages(p)}\n}\n\ninvisible(sapply(my_packages, install_if_missing))\n\ndev_packages <- c(\"lbenz730/ncaahoopR\",\"jflancer/bigballR\")\n\ndev_install <- function(p){\n  devtools::install_github(p)\n}\n\ninvisible(sapply(dev_packages,dev_install))\n```\n:::\n\n\n\\\nI'm installing packages from both CRAN as well as github.\n\n\\\n**Build APP**\\\nOnce you are done setting all of this up, run this command to get your files up to heroku.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit push heroku master\n```\n:::\n\n\n\\\nAt this point, it will start building up your app. Note there are some free limits in terms of size and usage. \\\n\\\n**Heroku Scheduler** \\\nHere is the magic of getting scripts to run periodically. Heroku has various different add-ons, one of which is Heroku Scheduler. \\\n\\\nOnce you add the Scheduler. You go ahead and click on it and provide a bash command to run whatever script you would like. \\\n**R**\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nRscript app/script.R\n```\n:::\n\n\n**Python**\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npython app/script.py\n```\n:::\n\n\n\\\nThen select the frequency in which these should be run in the drop-down and you should be set. For further details on heroku scheduler, see this [link](https://devcenter.heroku.com/articles/scheduler)\\\n\\\nNote: to set up Heroku add-on's you have to provide cc info. However, they also provide estimates of costs. In my experience small daily tasks (like tweeting or grabbing data) have not run up a bill in the last 3-6 months that I have been using the service. \\\n\\\n**R and Python Set-up**\\\nI used R, to build a Twitter Bot, focusing on SEC basketball. Maybe next year the content will be more rich. For this year, it was just game information and the WP charts that were automated. All other content was hand curated. \\\n\\\n[R + Twitter Bot Repo](https://github.com/meysubb/SEC_Twitter)\\\n[Python + NCAA Baseball Data](https://github.com/meysubb/NCAAB_Scrapper)\\\n\\\nAs you can see nothing has really changed in the code except for maybe the paths. In all honestly the paths I could use something like `os.join`, for python, and something similar in R to avoid the whole app directory situation. Heroku put's all of the code in your repo under the app folder of the dyno. \\\n\\\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}